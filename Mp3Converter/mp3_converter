import os
import re
import time
from yt_dlp import YoutubeDL
import platform
import subprocess

def sanitize(filename):
    return re.sub(r'[\\/*?:"<>|]', "", filename).strip().rstrip('.')

def set_timestamp(file_path):
    try:
        current_time = time.time()
        os.utime(file_path, (current_time, current_time))
        print(f"Timestamp updated for: {file_path}")
    except Exception as e:
        print(f"Error updating timestamp for {file_path}: {e}")

def reveal_file(file_path):
    try:
        if platform.system() == "Darwin":
            subprocess.run(["open", "-R", file_path])
        elif platform.system() == "Windows":
            subprocess.run(["explorer", "/select", file_path])
        elif platform.system() == "Linux":
            directory = os.path.dirname(file_path)
            subprocess.run(["xdg-open", directory])
        else:
            print(f"File reveal functionality not supported on this operating system.")
    except Exception as e:
        print(f"Error revealing file: {e}")

def mp3_converter(video_url, playlist="music-playlist"):
    try:
        if not os.path.exists(playlist):
            os.makedirs(playlist)

        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': os.path.join(playlist, '%(title)s.%(ext)s'),
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
            }

            with YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(video_url, download=True)
                video_title = sanitize(info_dict.get('title', 'Untitled'))
                mp3_file_path = os.path.join(playlist, f'{video_title}.mp3')
                set_timestamp(mp3_file_path)
                print(f"Downloaded: {mp3_file_path}")

                reveal_file(mp3_file_path)
        except Exception as e:
            print(f"Error downloading mp3 file: {e}")
    except Exception as e:
        print(f"Error occurred while processing {video_url}: {e}")

if __name__ == '__main__':
    while True:
        video_url = input("Enter video url (or type 'exit' to quit): ")
        if video_url.lower() == 'exit':
            print("Exiting the program. Thank you!")
            break
        elif video_url.strip():
            mp3_converter(video_url)
        else:
            print("Invalid input. Please enter a valid video url or 'exit'.")
